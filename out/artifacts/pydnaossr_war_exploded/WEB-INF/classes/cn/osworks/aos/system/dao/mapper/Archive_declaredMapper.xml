<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- archive_declared[archive_declared]SQLMapper自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2019-12-21 18:40:00 -->
<mapper namespace="cn.osworks.aos.system.dao.mapper.Archive_declaredMapper">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="Archive_declaredPO">
		INSERT INTO archive_declared (
		<if test="name_ != null and name_ != ''">
	         name_, <!-- name_ -->
		</if>
		<if test="desc_ != null and desc_ != ''">
	         desc_, <!-- desc_ -->
		</if>
		<if test="declared_list != null and declared_list != ''">
	         declared_list, <!-- declared_list -->
		</if>
		<if test="create_person != null and create_person != ''">
	         create_person, <!-- create_person -->
		</if>
		<if test="create_time != null and create_time != ''">
	         create_time, <!-- create_time -->
		</if>
		<if test="id_ != null and id_ != ''">
	          id_  <!-- id_ -->
	   </if>
		)VALUES(
		<if test="name_ != null and name_ != ''">
	          #{name_, jdbcType=VARCHAR}, <!-- name_ -->
	    </if>
		<if test="desc_ != null and desc_ != ''">
	          #{desc_, jdbcType=VARCHAR}, <!-- desc_ -->
	    </if>
		<if test="declared_list != null and declared_list != ''">
	          #{declared_list, jdbcType=VARCHAR}, <!-- declared_list -->
	    </if>
		<if test="create_person != null and create_person != ''">
	          #{create_person, jdbcType=VARCHAR}, <!-- create_person -->
	    </if>
		<if test="create_time != null and create_time != ''">
	          #{create_time, jdbcType=VARCHAR}, <!-- create_time -->
	    </if>
		<if test="id_ != null and id_ != ''">
		     #{id_, jdbcType=VARCHAR}  <!-- id_ -->
	    </if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="Archive_declaredPO">
		INSERT INTO archive_declared (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=VARCHAR},  <!-- id_ -->
		    #{name_, jdbcType=VARCHAR},  <!-- name_ -->
		    #{desc_, jdbcType=VARCHAR},  <!-- desc_ -->
		    #{declared_list, jdbcType=VARCHAR},  <!-- declared_list -->
		    #{create_person, jdbcType=VARCHAR},  <!-- create_person -->
		    #{create_time, jdbcType=VARCHAR}  <!-- create_time -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Archive_declaredPO">
		UPDATE archive_declared
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=VARCHAR},  <!-- id_ -->
			</if>
			<if test="name_ != null">
		          name_ = #{name_, jdbcType=VARCHAR},  <!-- name_ -->
			</if>
			<if test="desc_ != null">
		          desc_ = #{desc_, jdbcType=VARCHAR},  <!-- desc_ -->
			</if>
			<if test="declared_list != null">
		          declared_list = #{declared_list, jdbcType=VARCHAR},  <!-- declared_list -->
			</if>
			<if test="create_person != null">
		          create_person = #{create_person, jdbcType=VARCHAR},  <!-- create_person -->
			</if>
			<if test="create_time != null">
		          create_time = #{create_time, jdbcType=VARCHAR},  <!-- create_time -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM archive_declared WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Archive_declaredPO">
		SELECT
		<include refid="column" />
		FROM archive_declared WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Archive_declaredPO">
		SELECT
		    <include refid="column" />
		FROM archive_declared
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Archive_declaredPO">
		SELECT
			<include refid="column" />	
		FROM archive_declared
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Archive_declaredPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM archive_declared
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Archive_declaredPO">
		SELECT
			<include refid="column" />	
		FROM archive_declared
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Archive_declaredPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM archive_declared
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM archive_declared
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM archive_declared
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- id_ -->
		  name_,  <!-- name_ -->
		  desc_,  <!-- desc_ -->
		  declared_list,  <!-- declared_list -->
		  create_person,  <!-- create_person -->
		  create_time  <!-- create_time -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  archive_declared.id_,  <!-- id_ -->
		  archive_declared.name_,  <!-- name_ -->
		  archive_declared.desc_,  <!-- desc_ -->
		  archive_declared.declared_list,  <!-- declared_list -->
		  archive_declared.create_person,  <!-- create_person -->
		  archive_declared.create_time  <!-- create_time -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="id_ != null and id_ != ''">
		      AND id_ = #{id_}  <!-- id_ -->
		</if>
	    <if test="name_ != null and name_ != ''">
		      AND name_ = #{name_}  <!-- name_ -->
		</if>
	    <if test="desc_ != null and desc_ != ''">
		      AND desc_ = #{desc_}  <!-- desc_ -->
		</if>
	    <if test="declared_list != null and declared_list != ''">
		      AND declared_list = #{declared_list}  <!-- declared_list -->
		</if>
	    <if test="create_person != null and create_person != ''">
		      AND create_person = #{create_person}  <!-- create_person -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time = #{create_time}  <!-- create_time -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="id_ != null and id_ != ''">
		      AND id_ like '%${id_}%'  <!-- id_ -->
		</if>
	    <if test="name_ != null and name_ != ''">
		      AND name_ like '%${name_}%'  <!-- name_ -->
		</if>
	    <if test="desc_ != null and desc_ != ''">
		      AND desc_ like '%${desc_}%'  <!-- desc_ -->
		</if>
	    <if test="declared_list != null and declared_list != ''">
		      AND declared_list like '%${declared_list}%'  <!-- declared_list -->
		</if>
	    <if test="create_person != null and create_person != ''">
		      AND create_person like '%${create_person}%'  <!-- create_person -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time like '%${create_time}%'  <!-- create_time -->
		</if>
	</sql>
	
</mapper>
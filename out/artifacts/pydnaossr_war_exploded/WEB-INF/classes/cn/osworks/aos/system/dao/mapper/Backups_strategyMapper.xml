<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- backups_strategy[backups_strategy]SQLMapper自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2019-12-24 17:17:38 -->
<mapper namespace="cn.osworks.aos.system.dao.mapper.Backups_strategyMapper">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="Backups_strategyPO">
		INSERT INTO backups_strategy (
		<if test="ccgz != null and ccgz != ''">
	         ccgz, <!-- ccgz -->
		</if>
		<if test="cclj != null and cclj != ''">
	         cclj, <!-- cclj -->
		</if>
		<if test="ccfs != null and ccfs != ''">
	         ccfs, <!-- ccfs -->
		</if>
		<if test="bz != null and bz != ''">
	         bz, <!-- bz -->
		</if>
		<if test="id_ != null and id_ != ''">
	          id_  <!-- id_ -->
	   </if>
		)VALUES(
		<if test="ccgz != null and ccgz != ''">
	          #{ccgz, jdbcType=VARCHAR}, <!-- ccgz -->
	    </if>
		<if test="cclj != null and cclj != ''">
	          #{cclj, jdbcType=VARCHAR}, <!-- cclj -->
	    </if>
		<if test="ccfs != null and ccfs != ''">
	          #{ccfs, jdbcType=VARCHAR}, <!-- ccfs -->
	    </if>
		<if test="bz != null and bz != ''">
	          #{bz, jdbcType=VARCHAR}, <!-- bz -->
	    </if>
		<if test="id_ != null and id_ != ''">
		     #{id_, jdbcType=VARCHAR}  <!-- id_ -->
	    </if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="Backups_strategyPO">
		INSERT INTO backups_strategy (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=VARCHAR},  <!-- id_ -->
		    #{ccgz, jdbcType=VARCHAR},  <!-- ccgz -->
		    #{cclj, jdbcType=VARCHAR},  <!-- cclj -->
		    #{ccfs, jdbcType=VARCHAR},  <!-- ccfs -->
		    #{bz, jdbcType=VARCHAR}  <!-- bz -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Backups_strategyPO">
		UPDATE backups_strategy
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=VARCHAR},  <!-- id_ -->
			</if>
			<if test="ccgz != null">
		          ccgz = #{ccgz, jdbcType=VARCHAR},  <!-- ccgz -->
			</if>
			<if test="cclj != null">
		          cclj = #{cclj, jdbcType=VARCHAR},  <!-- cclj -->
			</if>
			<if test="ccfs != null">
		          ccfs = #{ccfs, jdbcType=VARCHAR},  <!-- ccfs -->
			</if>
			<if test="bz != null">
		          bz = #{bz, jdbcType=VARCHAR},  <!-- bz -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM backups_strategy WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Backups_strategyPO">
		SELECT
		<include refid="column" />
		FROM backups_strategy WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Backups_strategyPO">
		SELECT
		    <include refid="column" />
		FROM backups_strategy
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Backups_strategyPO">
		SELECT
			<include refid="column" />	
		FROM backups_strategy
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Backups_strategyPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM backups_strategy
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Backups_strategyPO">
		SELECT
			<include refid="column" />	
		FROM backups_strategy
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Backups_strategyPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM backups_strategy
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM backups_strategy
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM backups_strategy
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- id_ -->
		  ccgz,  <!-- ccgz -->
		  cclj,  <!-- cclj -->
		  ccfs,  <!-- ccfs -->
		  bz  <!-- bz -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  backups_strategy.id_,  <!-- id_ -->
		  backups_strategy.ccgz,  <!-- ccgz -->
		  backups_strategy.cclj,  <!-- cclj -->
		  backups_strategy.ccfs,  <!-- ccfs -->
		  backups_strategy.bz  <!-- bz -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="id_ != null and id_ != ''">
		      AND id_ = #{id_}  <!-- id_ -->
		</if>
	    <if test="ccgz != null and ccgz != ''">
		      AND ccgz = #{ccgz}  <!-- ccgz -->
		</if>
	    <if test="cclj != null and cclj != ''">
		      AND cclj = #{cclj}  <!-- cclj -->
		</if>
	    <if test="ccfs != null and ccfs != ''">
		      AND ccfs = #{ccfs}  <!-- ccfs -->
		</if>
	    <if test="bz != null and bz != ''">
		      AND bz = #{bz}  <!-- bz -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="id_ != null and id_ != ''">
		      AND id_ like '%${id_}%'  <!-- id_ -->
		</if>
	    <if test="ccgz != null and ccgz != ''">
		      AND ccgz like '%${ccgz}%'  <!-- ccgz -->
		</if>
	    <if test="cclj != null and cclj != ''">
		      AND cclj like '%${cclj}%'  <!-- cclj -->
		</if>
	    <if test="ccfs != null and ccfs != ''">
		      AND ccfs like '%${ccfs}%'  <!-- ccfs -->
		</if>
	    <if test="bz != null and bz != ''">
		      AND bz like '%${bz}%'  <!-- bz -->
		</if>
	</sql>
	
</mapper>
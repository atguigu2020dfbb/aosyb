<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- archive_general[archive_general]SQLMapper自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2019-09-26 18:24:21 -->
<mapper namespace="cn.osworks.aos.system.dao.mapper.Archive_generalMapper">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="Archive_generalPO">
		INSERT INTO archive_general (
		<if test="general_number != null and general_number != ''">
	         general_number, <!-- general_number -->
		</if>
		<if test="general_name != null and general_name != ''">
	         general_name, <!-- general_name -->
		</if>
		<if test="create_person != null and create_person != ''">
	         create_person, <!-- create_person -->
		</if>
		<if test="create_time != null and create_time != ''">
	         create_time, <!-- create_time -->
		</if>
		<if test="id_ != null and id_ != ''">
			id_ <!-- id_ -->
		</if>
		)VALUES(

		<if test="general_number != null and general_number != ''">
	          #{general_number, jdbcType=VARCHAR}, <!-- general_number -->
	    </if>
		<if test="general_name != null and general_name != ''">
	          #{general_name, jdbcType=VARCHAR}, <!-- general_name -->
	    </if>
		<if test="create_person != null and create_person != ''">
	          #{create_person, jdbcType=VARCHAR}, <!-- create_person -->
	    </if>
		<if test="create_time != null and create_time != ''">
	          #{create_time, jdbcType=VARCHAR}, <!-- create_time -->
	    </if>
		<if test="id_ != null and id_ != ''">
			#{id_, jdbcType=VARCHAR} <!-- id_ -->
		</if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="Archive_generalPO">
		INSERT INTO archive_general (
		    <include refid="column" />
		)
		VALUES (
		      <!-- id_ -->
		    #{general_number, jdbcType=VARCHAR},  <!-- general_number -->
		    #{general_name, jdbcType=VARCHAR},  <!-- general_name -->
		    #{create_person, jdbcType=VARCHAR},  <!-- create_person -->
		    #{create_time, jdbcType=VARCHAR},  <!-- create_time -->
		    #{id_, jdbcType=VARCHAR}
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Archive_generalPO">
		UPDATE archive_general
		<set>

			<if test="general_number != null">
		          general_number = #{general_number, jdbcType=VARCHAR},  <!-- general_number -->
			</if>
			<if test="general_name != null">
		          general_name = #{general_name, jdbcType=VARCHAR},  <!-- general_name -->
			</if>
			<if test="create_person != null">
		          create_person = #{create_person, jdbcType=VARCHAR},  <!-- create_person -->
			</if>
			<if test="create_time != null">
		          create_time = #{create_time, jdbcType=VARCHAR},  <!-- create_time -->
			</if>
		</set>
		WHERE id_=#{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM archive_general WHERE id_=#{id_}
	</delete>
	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Archive_generalPO">
		SELECT
		<include refid="column" />
		FROM archive_general WHERE id_=#{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Archive_generalPO">
		SELECT
		    <include refid="column" />
		FROM archive_general
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Archive_generalPO">
		SELECT
			<include refid="column" />	
		FROM archive_general
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Archive_generalPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM archive_general
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Archive_generalPO">
		SELECT
			<include refid="column" />	
		FROM archive_general
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Archive_generalPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM archive_general
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM archive_general
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM archive_general
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  general_number,  <!-- general_number -->
		  general_name,  <!-- general_name -->
		  create_person,  <!-- create_person -->
		  create_time,  <!-- create_time -->
		id_
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		   <!-- id_ -->
		  archive_general.general_number,  <!-- general_number -->
		  archive_general.general_name,  <!-- general_name -->
		  archive_general.create_person,  <!-- create_person -->
		  archive_general.create_time,  <!-- create_time -->
		archive_general.id_
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="id_ != null and id_ != ''">
		      AND id_ = #{id_}  <!-- id_ -->
		</if>
	    <if test="general_number != null and general_number != ''">
		      AND general_number = #{general_number}  <!-- general_number -->
		</if>
	    <if test="general_name != null and general_name != ''">
		      AND general_name = #{general_name}  <!-- general_name -->
		</if>
	    <if test="create_person != null and create_person != ''">
		      AND create_person = #{create_person}  <!-- create_person -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time = #{create_time}  <!-- create_time -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="id_ != null and id_ != ''">
		      AND id_ like '%${id_}%'  <!-- id_ -->
		</if>
	    <if test="general_number != null and general_number != ''">
		      AND general_number like '%${general_number}%'  <!-- general_number -->
		</if>
	    <if test="general_name != null and general_name != ''">
		      AND general_name like '%${general_name}%'  <!-- general_name -->
		</if>
	    <if test="create_person != null and create_person != ''">
		      AND create_person like '%${create_person}%'  <!-- create_person -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time like '%${create_time}%'  <!-- create_time -->
		</if>
	</sql>
	
</mapper>
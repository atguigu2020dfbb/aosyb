<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- archive_error_register[archive_error_register]SQLMapper自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2019-11-23 15:04:58 -->
<mapper namespace="cn.osworks.aos.system.dao.mapper.Archive_error_registerMapper">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="Archive_error_registerPO">
		INSERT INTO archive_error_register (
		<if test="djbh != null and djbh != ''">
	         djbh, <!-- djbh -->
		</if>
		<if test="error_archive != null and error_archive != ''">
	         error_archive, <!-- error_archive -->
		</if>
		<if test="register_time != null and register_time != ''">
	         register_time, <!-- register_time -->
		</if>
		<if test="dh != null and dh != ''">
	         dh, <!-- dh -->
		</if>
		<if test="error_description != null and error_description != ''">
	         error_description, <!-- error_description -->
		</if>
		<if test="flag != null">
	         flag, <!-- flag -->
		</if>
		<if test="id_ != null and id_ != ''">
	          id_  <!-- id_ -->
	   </if>
		)VALUES(
		<if test="djbh != null and djbh != ''">
	          #{djbh, jdbcType=VARCHAR}, <!-- djbh -->
	    </if>
		<if test="error_archive != null and error_archive != ''">
	          #{error_archive, jdbcType=VARCHAR}, <!-- error_archive -->
	    </if>
		<if test="register_time != null and register_time != ''">
	          #{register_time, jdbcType=VARCHAR}, <!-- register_time -->
	    </if>
		<if test="dh != null and dh != ''">
	          #{dh, jdbcType=VARCHAR}, <!-- dh -->
	    </if>
		<if test="error_description != null and error_description != ''">
	          #{error_description, jdbcType=VARCHAR}, <!-- error_description -->
	    </if>
		<if test="flag != null">
	          #{flag, jdbcType=INTEGER}, <!-- flag -->
	    </if>
		<if test="id_ != null and id_ != ''">
		     #{id_, jdbcType=VARCHAR}  <!-- id_ -->
	    </if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="Archive_error_registerPO">
		INSERT INTO archive_error_register (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=VARCHAR},  <!-- id_ -->
		    #{djbh, jdbcType=VARCHAR},  <!-- djbh -->
		    #{error_archive, jdbcType=VARCHAR},  <!-- error_archive -->
		    #{register_time, jdbcType=VARCHAR},  <!-- register_time -->
		    #{dh, jdbcType=VARCHAR},  <!-- dh -->
		    #{error_description, jdbcType=VARCHAR},  <!-- error_description -->
		    #{flag, jdbcType=INTEGER}  <!-- flag -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Archive_error_registerPO">
		UPDATE archive_error_register
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=VARCHAR},  <!-- id_ -->
			</if>
			<if test="djbh != null">
		          djbh = #{djbh, jdbcType=VARCHAR},  <!-- djbh -->
			</if>
			<if test="error_archive != null">
		          error_archive = #{error_archive, jdbcType=VARCHAR},  <!-- error_archive -->
			</if>
			<if test="register_time != null">
		          register_time = #{register_time, jdbcType=VARCHAR},  <!-- register_time -->
			</if>
			<if test="dh != null">
		          dh = #{dh, jdbcType=VARCHAR},  <!-- dh -->
			</if>
			<if test="error_description != null">
		          error_description = #{error_description, jdbcType=VARCHAR},  <!-- error_description -->
			</if>
			<if test="flag != null">
		          flag = #{flag, jdbcType=INTEGER},  <!-- flag -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM archive_error_register WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Archive_error_registerPO">
		SELECT
		<include refid="column" />
		FROM archive_error_register WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Archive_error_registerPO">
		SELECT
		    <include refid="column" />
		FROM archive_error_register
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Archive_error_registerPO">
		SELECT
			<include refid="column" />	
		FROM archive_error_register
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Archive_error_registerPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM archive_error_register
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Archive_error_registerPO">
		SELECT
			<include refid="column" />	
		FROM archive_error_register
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Archive_error_registerPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM archive_error_register
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM archive_error_register
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM archive_error_register
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- id_ -->
		  djbh,  <!-- djbh -->
		  error_archive,  <!-- error_archive -->
		  register_time,  <!-- register_time -->
		  dh,  <!-- dh -->
		  error_description,  <!-- error_description -->
		  flag  <!-- flag -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  archive_error_register.id_,  <!-- id_ -->
		  archive_error_register.djbh,  <!-- djbh -->
		  archive_error_register.error_archive,  <!-- error_archive -->
		  archive_error_register.register_time,  <!-- register_time -->
		  archive_error_register.dh,  <!-- dh -->
		  archive_error_register.error_description,  <!-- error_description -->
		  archive_error_register.flag  <!-- flag -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="id_ != null and id_ != ''">
		      AND id_ = #{id_}  <!-- id_ -->
		</if>
	    <if test="djbh != null and djbh != ''">
		      AND djbh = #{djbh}  <!-- djbh -->
		</if>
	    <if test="error_archive != null and error_archive != ''">
		      AND error_archive = #{error_archive}  <!-- error_archive -->
		</if>
	    <if test="register_time != null and register_time != ''">
		      AND register_time = #{register_time}  <!-- register_time -->
		</if>
	    <if test="dh != null and dh != ''">
		      AND dh = #{dh}  <!-- dh -->
		</if>
	    <if test="error_description != null and error_description != ''">
		      AND error_description = #{error_description}  <!-- error_description -->
		</if>
	   <if test="flag != null ">
		      AND flag = #{flag}  <!-- flag -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="id_ != null and id_ != ''">
		      AND id_ like '%${id_}%'  <!-- id_ -->
		</if>
	    <if test="djbh != null and djbh != ''">
		      AND djbh like '%${djbh}%'  <!-- djbh -->
		</if>
	    <if test="error_archive != null and error_archive != ''">
		      AND error_archive like '%${error_archive}%'  <!-- error_archive -->
		</if>
	    <if test="register_time != null and register_time != ''">
		      AND register_time like '%${register_time}%'  <!-- register_time -->
		</if>
	    <if test="dh != null and dh != ''">
		      AND dh like '%${dh}%'  <!-- dh -->
		</if>
	    <if test="error_description != null and error_description != ''">
		      AND error_description like '%${error_description}%'  <!-- error_description -->
		</if>
	</sql>
	
</mapper>
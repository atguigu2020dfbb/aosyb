<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- backups_log[backups_log]SQLMapper自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2019-12-30 09:33:33 -->
<mapper namespace="cn.osworks.aos.system.dao.mapper.Backups_logMapper">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="Backups_logPO">
		INSERT INTO backups_log (
		<if test="hyb != null and hyb != ''">
	         hyb, <!-- hyb -->
		</if>
		<if test="hywj != null and hywj != ''">
	         hywj, <!-- hywj -->
		</if>
		<if test="hysj != null and hysj != ''">
	         hysj, <!-- hysj -->
		</if>
		<if test="hyr != null and hyr != ''">
	         hyr, <!-- hyr -->
		</if>
		<if test="id_ != null and id_ != ''">
	          id_  <!-- id_ -->
	   </if>
		)VALUES(
		<if test="hyb != null and hyb != ''">
	          #{hyb, jdbcType=VARCHAR}, <!-- hyb -->
	    </if>
		<if test="hywj != null and hywj != ''">
	          #{hywj, jdbcType=VARCHAR}, <!-- hywj -->
	    </if>
		<if test="hysj != null and hysj != ''">
	          #{hysj, jdbcType=VARCHAR}, <!-- hysj -->
	    </if>
		<if test="hyr != null and hyr != ''">
	          #{hyr, jdbcType=VARCHAR}, <!-- hyr -->
	    </if>
		<if test="id_ != null and id_ != ''">
		     #{id_, jdbcType=VARCHAR}  <!-- id_ -->
	    </if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="Backups_logPO">
		INSERT INTO backups_log (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=VARCHAR},  <!-- id_ -->
		    #{hyb, jdbcType=VARCHAR},  <!-- hyb -->
		    #{hywj, jdbcType=VARCHAR},  <!-- hywj -->
		    #{hysj, jdbcType=VARCHAR},  <!-- hysj -->
		    #{hyr, jdbcType=VARCHAR}  <!-- hyr -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Backups_logPO">
		UPDATE backups_log
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=VARCHAR},  <!-- id_ -->
			</if>
			<if test="hyb != null">
		          hyb = #{hyb, jdbcType=VARCHAR},  <!-- hyb -->
			</if>
			<if test="hywj != null">
		          hywj = #{hywj, jdbcType=VARCHAR},  <!-- hywj -->
			</if>
			<if test="hysj != null">
		          hysj = #{hysj, jdbcType=VARCHAR},  <!-- hysj -->
			</if>
			<if test="hyr != null">
		          hyr = #{hyr, jdbcType=VARCHAR},  <!-- hyr -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM backups_log WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Backups_logPO">
		SELECT
		<include refid="column" />
		FROM backups_log WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Backups_logPO">
		SELECT
		    <include refid="column" />
		FROM backups_log
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Backups_logPO">
		SELECT
			<include refid="column" />	
		FROM backups_log
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Backups_logPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM backups_log
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Backups_logPO">
		SELECT
			<include refid="column" />	
		FROM backups_log
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Backups_logPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM backups_log
		<where>
		    <include refid="like" />
			<if test="key_name_ != null and key_name_ != ''">
				AND (hyb LIKE '%${key_name_}%' OR hyr LIKE '%${key_name_}%')
			</if>

		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM backups_log
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM backups_log
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- id_ -->
		  hyb,  <!-- hyb -->
		  hywj,  <!-- hywj -->
		  hysj,  <!-- hysj -->
		  hyr  <!-- hyr -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  backups_log.id_,  <!-- id_ -->
		  backups_log.hyb,  <!-- hyb -->
		  backups_log.hywj,  <!-- hywj -->
		  backups_log.hysj,  <!-- hysj -->
		  backups_log.hyr  <!-- hyr -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="id_ != null and id_ != ''">
		      AND id_ = #{id_}  <!-- id_ -->
		</if>
	    <if test="hyb != null and hyb != ''">
		      AND hyb = #{hyb}  <!-- hyb -->
		</if>
	    <if test="hywj != null and hywj != ''">
		      AND hywj = #{hywj}  <!-- hywj -->
		</if>
	    <if test="hysj != null and hysj != ''">
		      AND hysj = #{hysj}  <!-- hysj -->
		</if>
	    <if test="hyr != null and hyr != ''">
		      AND hyr = #{hyr}  <!-- hyr -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="id_ != null and id_ != ''">
		      AND id_ like '%${id_}%'  <!-- id_ -->
		</if>
	    <if test="hyb != null and hyb != ''">
		      AND hyb like '%${hyb}%'  <!-- hyb -->
		</if>
	    <if test="hywj != null and hywj != ''">
		      AND hywj like '%${hywj}%'  <!-- hywj -->
		</if>
	    <if test="hysj != null and hysj != ''">
		      AND hysj like '%${hysj}%'  <!-- hysj -->
		</if>
	    <if test="hyr != null and hyr != ''">
		      AND hyr like '%${hyr}%'  <!-- hyr -->
		</if>
	</sql>
	
</mapper>
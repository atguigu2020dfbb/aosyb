<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- checkup_topic[checkup_topic]SQLMapper自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2020-03-30 13:17:32 -->
<mapper namespace="cn.osworks.aos.system.dao.mapper.Checkup_topicMapper">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="Checkup_topicPO">
		INSERT INTO checkup_topic (
		<if test="topic_name != null and topic_name != ''">
	         topic_name, <!-- topic_name -->
		</if>
		<if test="topic_tablename != null and topic_tablename != ''">
	         topic_tablename, <!-- topic_tablename -->
		</if>
		<if test="topic_description != null and topic_description != ''">
	         topic_description, <!-- topic_description -->
		</if>
		<if test="create_person != null and create_person != ''">
	         create_person, <!-- create_person -->
		</if>
		<if test="create_time != null and create_time != ''">
	         create_time, <!-- create_time -->
		</if>
		<if test="topic_tabledesc != null and topic_tabledesc != ''">
	         topic_tabledesc, <!-- topic_tabledesc -->
		</if>
		<if test="id_ != null and id_ != ''">
	          id_  <!-- id_ -->
	   </if>
		)VALUES(
		<if test="topic_name != null and topic_name != ''">
	          #{topic_name, jdbcType=VARCHAR}, <!-- topic_name -->
	    </if>
		<if test="topic_tablename != null and topic_tablename != ''">
	          #{topic_tablename, jdbcType=VARCHAR}, <!-- topic_tablename -->
	    </if>
		<if test="topic_description != null and topic_description != ''">
	          #{topic_description, jdbcType=VARCHAR}, <!-- topic_description -->
	    </if>
		<if test="create_person != null and create_person != ''">
	          #{create_person, jdbcType=VARCHAR}, <!-- create_person -->
	    </if>
		<if test="create_time != null and create_time != ''">
	          #{create_time, jdbcType=VARCHAR}, <!-- create_time -->
	    </if>
		<if test="topic_tabledesc != null and topic_tabledesc != ''">
	          #{topic_tabledesc, jdbcType=VARCHAR}, <!-- topic_tabledesc -->
	    </if>
		<if test="id_ != null and id_ != ''">
		     #{id_, jdbcType=VARCHAR}  <!-- id_ -->
	    </if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="Checkup_topicPO">
		INSERT INTO checkup_topic (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=VARCHAR},  <!-- id_ -->
		    #{topic_name, jdbcType=VARCHAR},  <!-- topic_name -->
		    #{topic_tablename, jdbcType=VARCHAR},  <!-- topic_tablename -->
		    #{topic_description, jdbcType=VARCHAR},  <!-- topic_description -->
		    #{create_person, jdbcType=VARCHAR},  <!-- create_person -->
		    #{create_time, jdbcType=VARCHAR},  <!-- create_time -->
		    #{topic_tabledesc, jdbcType=VARCHAR}  <!-- topic_tabledesc -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Checkup_topicPO">
		UPDATE checkup_topic
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=VARCHAR},  <!-- id_ -->
			</if>
			<if test="topic_name != null">
		          topic_name = #{topic_name, jdbcType=VARCHAR},  <!-- topic_name -->
			</if>
			<if test="topic_tablename != null">
		          topic_tablename = #{topic_tablename, jdbcType=VARCHAR},  <!-- topic_tablename -->
			</if>
			<if test="topic_description != null">
		          topic_description = #{topic_description, jdbcType=VARCHAR},  <!-- topic_description -->
			</if>
			<if test="create_person != null">
		          create_person = #{create_person, jdbcType=VARCHAR},  <!-- create_person -->
			</if>
			<if test="create_time != null">
		          create_time = #{create_time, jdbcType=VARCHAR},  <!-- create_time -->
			</if>
			<if test="topic_tabledesc != null">
		          topic_tabledesc = #{topic_tabledesc, jdbcType=VARCHAR},  <!-- topic_tabledesc -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM checkup_topic WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Checkup_topicPO">
		SELECT
		<include refid="column" />
		FROM checkup_topic WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Checkup_topicPO">
		SELECT
		    <include refid="column" />
		FROM checkup_topic
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Checkup_topicPO">
		SELECT
			<include refid="column" />	
		FROM checkup_topic
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Checkup_topicPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM checkup_topic
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Checkup_topicPO">
		SELECT
			<include refid="column" />	
		FROM checkup_topic
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Checkup_topicPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM checkup_topic
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM checkup_topic
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM checkup_topic
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- id_ -->
		  topic_name,  <!-- topic_name -->
		  topic_tablename,  <!-- topic_tablename -->
		  topic_description,  <!-- topic_description -->
		  create_person,  <!-- create_person -->
		  create_time,  <!-- create_time -->
		  topic_tabledesc  <!-- topic_tabledesc -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  checkup_topic.id_,  <!-- id_ -->
		  checkup_topic.topic_name,  <!-- topic_name -->
		  checkup_topic.topic_tablename,  <!-- topic_tablename -->
		  checkup_topic.topic_description,  <!-- topic_description -->
		  checkup_topic.create_person,  <!-- create_person -->
		  checkup_topic.create_time,  <!-- create_time -->
		  checkup_topic.topic_tabledesc  <!-- topic_tabledesc -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="id_ != null and id_ != ''">
		      AND id_ = #{id_}  <!-- id_ -->
		</if>
	    <if test="topic_name != null and topic_name != ''">
		      AND topic_name = #{topic_name}  <!-- topic_name -->
		</if>
	    <if test="topic_tablename != null and topic_tablename != ''">
		      AND topic_tablename = #{topic_tablename}  <!-- topic_tablename -->
		</if>
	    <if test="topic_description != null and topic_description != ''">
		      AND topic_description = #{topic_description}  <!-- topic_description -->
		</if>
	    <if test="create_person != null and create_person != ''">
		      AND create_person = #{create_person}  <!-- create_person -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time = #{create_time}  <!-- create_time -->
		</if>
	    <if test="topic_tabledesc != null and topic_tabledesc != ''">
		      AND topic_tabledesc = #{topic_tabledesc}  <!-- topic_tabledesc -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="id_ != null and id_ != ''">
		      AND id_ like '%${id_}%'  <!-- id_ -->
		</if>
	    <if test="topic_name != null and topic_name != ''">
		      AND topic_name like '%${topic_name}%'  <!-- topic_name -->
		</if>
	    <if test="topic_tablename != null and topic_tablename != ''">
		      AND topic_tablename like '%${topic_tablename}%'  <!-- topic_tablename -->
		</if>
	    <if test="topic_description != null and topic_description != ''">
		      AND topic_description like '%${topic_description}%'  <!-- topic_description -->
		</if>
	    <if test="create_person != null and create_person != ''">
		      AND create_person like '%${create_person}%'  <!-- create_person -->
		</if>
	    <if test="create_time != null and create_time != ''">
		      AND create_time like '%${create_time}%'  <!-- create_time -->
		</if>
	    <if test="topic_tabledesc != null and topic_tabledesc != ''">
		      AND topic_tabledesc like '%${topic_tabledesc}%'  <!-- topic_tabledesc -->
		</if>
	</sql>
	
</mapper>